/* eslint-disable react/prop-types */
import React, { useEffect, useState } from 'react';
import styled from 'styled-components';
import { useLocation } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import { getPlay } from '@/api/play';
import { youtubeUpload } from '@/api/musicVideos';
import Swal from 'sweetalert2';
import withReactContent from 'sweetalert2-react-content';

const BackLayout = styled.div`
  width: 100%;
  height: calc(100vh - 5rem);
  min-height: calc(100vh - 5rem);
  display: flex;
  flex-direction: column;
  align-items: center;
  color: white;
  font-size: 1.5rem;
  gap: 1rem;
`;

const Category = styled.div`
  width: 100%;
  /* height: 100%; */
  display: flex;
  flex-direction: row;
  align-items: start;
  justify-content: center;
  margin-top: 2rem;
  gap: 2%;
`;

const CategoryTitle = styled.div`
  width: 6rem;
  height: 100%;
  display: flex;
  flex-direction: row;
  justify-content: end;
  align-items: start;
  font-weight: bold;
  text-align: end;
`;

const CategoryItem = styled.div`
  display: flex;
  flex-direction: row;
  width: 60%;
  height: 100%;
  display: flex;
`;

const TitleInput = styled.input`
  display: flex;
  width: 100%;
  font-size: 1rem;
  padding-left: 0.5rem;
  border: none;
  border-bottom: 2px solid #555555;
  background-color: transparent;
  color: white;
  border-radius: 0;

  &:focus {
    outline: none;
    border-bottom-color: white;
  }
`;

const DescriptionInputWrapper = styled.div`
  position: relative;
  width: 100%;
  aspect-ratio: 10 / 6;
  border: 1px solid #555555;
  border-radius: 0.25rem;
  overflow: hidden;
`;

const BackgroundImage = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  /* background-image: ${({ image }) => (image ? `url(${image})` : 'none')}; */
  background-color: none;
  background-size: cover;
  background-position: center;
  filter: brightness(0.3) blur(5px); /* 어둡고 흐리게 */
  z-index: 1;
`;

const StyledTextarea = styled.textarea`
  position: relative;
  width: 100%;
  height: 100%;
  padding: 0.5rem;
  font-size: 1rem;
  border: none;
  background: none;
  color: white;
  z-index: 2;
  resize: none;

  &:focus {
    outline: none;
    border-color: white;
  }
`;

const PrivacyInput = styled.div`
  display: flex;
  height: 3.5rem;
  width: 15rem;
  flex-direction: row;
  align-items: center;
  justify-content: flex-start;
  border-radius: 1rem;
  background: linear-gradient(
    45deg,
    #2d2a4a,
    #3b297d,
    #4c2892,
    #6e1e9b,
    #8e2de2
  );
  padding: 1rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
`;

const Slider = styled.div`
  position: absolute;
  height: 2.5rem;
  width: 6.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 1rem;
  background-color: #9085d1;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transform: ${({ status }) =>
    status === 'public' ? 'translateX(0)' : 'translateX(100%)'};
  transition: transform 0.3s ease-in-out;
`;

const SliderOptionText = styled.p`
  z-index: 10;
  display: flex;
  width: 50%;
  cursor: pointer;
  justify-content: center;
  font-size: 0.875rem;
  font-weight: bold;
  color: #ffffff;
`;

const UploadButton = styled.button`
  width: 100%;
  height: 3rem;
  background-color: #9085d1;
  border: none;
  border-radius: 0.25rem;
  color: white;
  font-size: 1rem;
  font-weight: bold;
  cursor: pointer;
  transition: background 0.3s ease-in-out; /* 여기서 background 속성에 대해 transition 설정 */

  &:hover {
    background-color: #7166b1;
  }
`;

const DescriptionInput = ({ image, ...props }) => (
  <DescriptionInputWrapper>
    <BackgroundImage image={image} />
    <StyledTextarea {...props} />
  </DescriptionInputWrapper>
);

function Upload() {
  const location = useLocation();
  const mvId = new URLSearchParams(location.search).get('mv-id');

  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [privacyStatus, setPrivacyStatus] = useState('public'); // public or private

  const { data, isError } = useQuery({
    queryKey: ['upload', mvId],
    queryFn: () => getPlay(mvId),
  });

  if (isError) {
    return <div>Error</div>;
  }

  useEffect(() => {
    if (data) {
      setTitle(`MVStudio '${data?.data.subject}' Official AI-Generated MV`);
      setDescription(`
MVStudio '${data?.data.subject}' Official AI-Generated MV

{Please write a brief description of the music video here.}

- Lyrics: Creatively generated by Open AI
- Music: Composed by Suno, an AI music generator bringing harmonious melodies.
- Video: Created using Runway Gen-3, a state-of-the-art AI video generator.

We hope you enjoy this fusion of art and technology!

Don't forget to like, comment, and subscribe for more AI-generated content.

#AIgenerated #MusicVideo #MVStudio #OpenAI #Suno #RunwayGen3 #${data?.data.genres} #${data?.data.style_name}_Video #ArtificialIntelligence #AI #Music #Video #Innovation #TechArt #CreativeTech
`);
    }
  }, [data]);
  console.log(data, isError);

  return (
    <BackLayout>
      {/* 제목 */}
      <Category>
        <CategoryTitle>제목</CategoryTitle>
        <CategoryItem>
          <TitleInput
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />
        </CategoryItem>
      </Category>

      {/* 설명 */}
      <Category style={{ height: '50%' }}>
        <CategoryTitle>설명</CategoryTitle>
        <CategoryItem>
          <DescriptionInput
            image={data?.data.cover_image}
            value={description}
            onChange={(e) => setDescription(e.target.value)}
          />
        </CategoryItem>
      </Category>

      {/* 공개 여부 */}
      <Category>
        <CategoryTitle>공개 여부</CategoryTitle>
        <CategoryItem>
          <PrivacyInput>
            <Slider status={privacyStatus} />
            <SliderOptionText onClick={() => setPrivacyStatus('public')}>
              Public
            </SliderOptionText>
            <SliderOptionText onClick={() => setPrivacyStatus('private')}>
              Private
            </SliderOptionText>
          </PrivacyInput>
        </CategoryItem>
      </Category>

      {/* 업로드 버튼 */}
      <Category>
        <CategoryTitle>업로드</CategoryTitle>
        <CategoryItem>
          <UploadButton
            onClick={() => {
              const UploadSwal = withReactContent(Swal);

              UploadSwal.fire({
                title: '업로드 중입니다...',
                text: '잠시만 기다려 주세요.',
                icon: 'info',
                allowOutsideClick: false,
                allowEscapeKey: false,
                didOpen: () => {
                  Swal.showLoading(); // 로딩 애니메이션 표시
                },
              });
              youtubeUpload(mvId, title, description, privacyStatus).then(
                (res) => {
                  console.log('res', res);
                  Swal.fire({
                    icon: 'success',
                    title: '업로드 완료!',
                    text: '실제로 반영되기까지 시간이 소요될 수 있습니다.',
                    showConfirmButton: true,
                    confirmButtonText: '확인',
                  }).then(() => {
                    window.close();
                  });
                },
              );
            }}
          >
            업로드
          </UploadButton>
        </CategoryItem>
      </Category>
    </BackLayout>
  );
}

export default Upload;
